#define PI 3.14159
#define Rotate(p, a) p = vec2(p.y, -p.x) * sin(a) + p * cos(a)

float length8( vec2 p )
{
	p = p*p; p = p*p; p = p*p;
	return pow( p.x + p.y, 1.0/8.0 );
}

float Disk( vec3 p, vec3 t )
{
    vec2 q = vec2(sqrt(p.y * p.y + p.x * p.x) - t.x, p.z * 0.5);
    return max(length8(q) - t.y, abs(p.z) - t.z);
}

const float nudge = 0.9;// size of perpendicular vector

float SpiralNoiseC(vec3 p, int iterate)
{
	float normalizer = 1.0 / sqrt(1.0 + nudge*nudge);	
    float n = 0.1;	// noise amount 
    float iter = 3.0;
    for (int i = 0; i < iterate; i++) //8 //this 1-5
    {
        // add sin and cos scaled inverse with the frequency
        n += -abs(sin(p.y*iter) + cos(p.x*iter)) / iter;	// abs for a ridged look
        // rotate by adding perpendicular and scaling down
        p.xy += vec2(p.y, -p.x) * nudge;
        p.xy *= normalizer;
        // rotate on other axis
        p.xz += vec2(p.z, -p.x) * nudge;
        p.xz *= normalizer;
        // increase the frequency
        iter *= 1.733733; //1.733733
    }
    return n;
}

float NebulaNoise(std::Texture2d myTex, vec3 p, int iterate, vec3 disk)
{
    float final = Disk(p.xzy, disk); //vec3(2.0,1.8,1.25) //this random min(0, 1.,0.)) max(6.5, 3.0,2.0))
    //final += fbm(myTex, p*90.);
    final += SpiralNoiseC(p.zxy*0.5123+100.0, iterate)*4.0; //SpiralNoiseC(p.zxy*0.5123+100.0)*3.0

    return final;
}

float map(std::Texture2d myTex, vec3 p, vec3 rotate, float noise, int iterate, vec3 disk) 
{
	Rotate(p.xz, rotate.x*0.008*PI +std::getTime()*0.25);//
    Rotate(p.yz, rotate.y*0.008*PI);
	//Rotate(p.yx, rotate.z*0.008*PI);

	float NebNoise = abs(NebulaNoise(myTex, p/0.5 *0.5, iterate, disk)); //abs(NebulaNoise(myTex, p/0.5)*0.5); //try *0.02
    
	return NebNoise - noise; //NebNoise+0.5*sin(std::getTime()*0.1)-0.4; //-0.05 - 0.05 //this control
}

bool RaySphereIntersect(vec3 org, vec3 dir, out float near, out float far)
{
	float b = dot(dir, org);
	float c = dot(org, org) - 5.; //- 5.
	float delta = b*b - c;
	if( delta < 0.0) 
		return false;
	float deltasqrt = sqrt(delta);
	near = -b - deltasqrt;
	far = -b + deltasqrt;
	return far > 0.0;
}

vec4 mainImage(std::Texture2d myTex, vec3 rotate, vec3 innerCol, vec3 outerCol, float noise, int iterate, vec3 disk)
{  
	// ro: ray origin
	// rd: direction of the ray
  vec2 iResolution = vec2(500.,500.);//std::getRenderTargetSize();
  vec2 fragCoord = fragment(floor(vec2(500.,500.) * std::getVertexTexCoord()));
	vec3 rd = normalize(vec3((fragCoord.xy-0.5*iResolution.xy)/iResolution.y, 1.));
	vec3 ro = vec3(0., 0., -8.);
	vec2 uv = std::getVertexTexCoord();
	vec4 myTexUV = myTex.sample(uv);
    
	// ld, td: local, total density 
	// w: weighting factor
	float ld=0., td=0., w=0.;

	// t: length of the ray
	// d: distance function
	float d=1., t=0.;
    
    const float h = 0.1;//0.1;
   
	vec4 sum = vec4(0);
   
    float min_dist=0.0, max_dist=0.0;

    if(RaySphereIntersect(ro, rd, min_dist, max_dist))
    {
		t = min_dist*step(t,min_dist);
	
		// raymarch loop
		for (int i=0; i<64; i++) 
		{
		
			vec3 pos = ro + t*rd;
	
			// Loop break conditions.
			if(td>0.9 || d<0.1*t || t>10. || sum.a > 0.99 || t>max_dist) break;
			
			// evaluate distance function
			float d = map(myTex, pos, rotate, noise, iterate, disk);
				
			// change this string to control density 
			d = max(d,0.0);
			
			// point light calculations
			vec3 ldst = vec3(0.0)-pos;
			float lDist = max(length(ldst), 0.001);

			if(i==0)
			sum.rgb = (vec3(1.0, 1.0, 1.0)/(lDist*lDist*10.)/80.);
			else
			sum.rgb+=(vec3(1.0, 1.0, 1.0)/(lDist*lDist*10.)/30.); // star itself //
			sum.rgb+=(innerCol/exp(lDist*lDist*lDist*.08)/30.); // bloom
			
			if (d<h)
			{
				// compute local density 
				ld = h - d;
				
				// compute weighting factor 
				w = (1. - td) * ld;
		
				// accumulate density
				td += w + 1./200.;
			
				vec4 col = vec4( outerCol, td );//vec4( computeColor(td,lDist), td );
				
				// emission
				sum += sum.a * vec4(sum.rgb, 0.0) * 0.15;	
				
				// uniform scale density
				col.a *= 0.2;
				// colour by alpha
				col.rgb *= col.a;
				// alpha blend in contribution
				sum = sum + col*(1.0 - sum.a);  
		
			}
		
			td += 1./70.;
			
			// trying to optimize step size near the camera and near the light source
			t += max(d * 0.1 * max(min(length(ldst),length(ro)),1.0), 0.01);
			
		}
		
		// simple scattering
		sum *= 1. / exp( ld * 0.2 ) * 0.6;
			
		sum = clamp( sum, 0.0, 1.0 );
	
		sum.xyz = sum.xyz*sum.xyz*(3.0-2.0*sum.xyz);
	}

	sum += myTexUV;
  return sum;
}